Qflow synthesis logfile created on Sun Aug 2 14:31:07 IST 2020
Running yosys for verilog parsing and synthesis
yosys  -s AMUX2_3V_top.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3468 (git sha1 c39ebe6, gcc 4.8.5 -fPIC -Os)


-- Executing script file `AMUX2_3V_top.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Liberty frontend.
Imported 1 cell types from liberty file.

3. Executing Verilog-2005 frontend: /home/praharsha/pnr_test/source/AMUX2_3V_top.v
Parsing Verilog input from `/home/praharsha/pnr_test/source/AMUX2_3V_top.v' to AST representation.
Generating RTLIL representation for module `\AMUX2_3V_top'.
/home/praharsha/pnr_test/source/AMUX2_3V_top.v:14: Warning: Identifier `\IO' is implicitly declared.
Successfully finished Verilog frontend.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \AMUX2_3V_top

4.1.2. Analyzing design hierarchy..
Top module:  \AMUX2_3V_top
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).

4.2.5. Executing PROC_ARST pass (detect async resets in processes).

4.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.5. Executing CHECK pass (checking for obvious problems).
checking module AMUX2_3V_top..
Warning: Wire AMUX2_3V_top.\IO is used but has no driver.
found and reported 1 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AMUX2_3V_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AMUX2_3V_top.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module AMUX2_3V_top:
  created 0 $alu and 0 $macc cells.

4.11. Executing SHARE pass (SAT-based resource sharing).

4.12. Executing OPT pass (performing simple optimizations).

4.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AMUX2_3V_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AMUX2_3V_top.
Performed a total of 0 changes.

4.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.12.9. Finished OPT passes. (There is nothing left to do.)

4.13. Executing FSM pass (extract and optimize FSM).

4.13.1. Executing FSM_DETECT pass (finding FSMs in design).

4.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.14.5. Finished fast OPT passes.

4.15. Executing MEMORY pass.

4.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.17. Executing OPT pass (performing simple optimizations).

4.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.
<suppressed ~1 debug messages>

4.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.17.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.17.5. Finished fast OPT passes.

4.18. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.19. Executing OPT pass (performing simple optimizations).

4.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AMUX2_3V_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AMUX2_3V_top.
Performed a total of 0 changes.

4.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.19.6. Executing OPT_SHARE pass.

4.19.7. Executing OPT_RMDFF pass (remove dff with constant values).

4.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.19.10. Finished OPT passes. (There is nothing left to do.)

4.20. Executing TECHMAP pass (map to technology primitives).

4.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.20.2. Continuing TECHMAP pass.
No more expansions possible.

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.21.5. Finished fast OPT passes.

4.22. Executing ABC pass (technology mapping using ABC).

4.22.1. Extracting gate netlist of module `\AMUX2_3V_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.23. Executing OPT pass (performing simple optimizations).

4.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

4.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

4.23.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

4.23.5. Finished fast OPT passes.

4.24. Executing HIERARCHY pass (managing design hierarchy).

4.24.1. Analyzing design hierarchy..
Top module:  \AMUX2_3V_top

4.24.2. Analyzing design hierarchy..
Top module:  \AMUX2_3V_top
Removed 0 unused modules.

4.25. Printing statistics.

=== AMUX2_3V_top ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     AMUX2_3V                        1

4.26. Executing CHECK pass (checking for obvious problems).
checking module AMUX2_3V_top..
found and reported 0 problems.

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

5.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\AMUX2_3V_top':

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AMUX2_3V_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AMUX2_3V_top.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing ABC pass (technology mapping using ABC).

7.1. Extracting gate netlist of module `\AMUX2_3V_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8. Executing FLATTEN pass (flatten design).

9. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 1 unused wires.

10. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port AMUX2_3V_top.I0: Missing option -inpad.
Don't map input port AMUX2_3V_top.I1: Missing option -inpad.
Don't map input port AMUX2_3V_top.VDD: Missing option -inpad.
Don't map input port AMUX2_3V_top.VSS: Missing option -inpad.
Mapping port AMUX2_3V_top.out using BUFX2.
Don't map input port AMUX2_3V_top.select: Missing option -inpad.

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AMUX2_3V_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AMUX2_3V_top.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AMUX2_3V_top'.
Removed a total of 0 cells.

11.6. Executing OPT_RMDFF pass (remove dff with constant values).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AMUX2_3V_top..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AMUX2_3V_top.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing BLIF backend.

13. Printing statistics.

=== AMUX2_3V_top ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     AMUX2_3V                        1
     BUFX2                           1

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: bb0c34d228, CPU: user 0.16s system 0.01s, MEM: 6.63 MB peak
Yosys 0.9+3468 (git sha1 c39ebe6, gcc 4.8.5 -fPIC -Os)
Time spent: 20% 3x read_verilog (0 sec), 14% 15x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl AMUX2_3V_top_mapped.blif AMUX2_3V_top /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I AMUX2_3V_top_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -S -p /home/praharsha/pnr_test/source/AMUX2_3V/AMUX2_3V.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif AMUX2_3V_top.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Parsing library "AMUX2_3V"
End of library at line 45
Lib Read:  Processed 46 lines.
Top internal fanout is 1 (load 80.7479) from node _0_,
driven by AMUX2_3V with strength inf (fF driven at latency 100)
Top fanout load-to-strength ratio is 0.713552 (latency = 71.3552 ps)
Top input node fanout is 1 (load 1) from node I1.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"2" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/praharsha/pnr_test
Files:
   Verilog: /home/praharsha/pnr_test/AMUX2_3V_top.rtl.v
   Verilog: /home/praharsha/pnr_test/AMUX2_3V_top.rtlnopwr.v
   Verilog: /home/praharsha/pnr_test/AMUX2_3V_top.rtlbb.v
   Spice:   /home/praharsha/pnr_test/AMUX2_3V_top.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib /home/praharsha/pnr_test/source/AMUX2_3V/AMUX2_3V.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f AMUX2_3V_top.spc AMUX2_3V_top.xspice

Synthesis script ended on Sun Aug 2 14:31:08 IST 2020
